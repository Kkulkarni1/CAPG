KEY:
[TODO] changes I think we need
[DONE] a completed [TODO]
X did not get done, but considered not worth doing
* pending issues

Tue Jan 29 20:02:35 CST 2019
[TODO] allow fasta files to spread sequence over multiple lines

Sun Oct  7 08:34:04 CDT 2018
GOAL: reuse as much as possible between ampliclust and khaplotypes
* use same data object (move extra khaplotype stuff into a khaplotype_model object)
* use same model object to share simulation code (simulation.c, simulation.h)
* use same initializer object since this is used by simulation code (initialization.c, initialization.h, aecm.c, aecm.h)
[TODO] since all of these use options, it forces a rethink of the options object:  options.h commented up with solution that divides itself into:
	- options for global options and links to some of the following depending on which run_* code
	- options_simulation: links to options_initialization
	- options_model
	- options_initialize: links to options_model
	- options_stages
[TODO] rewrite all the rest of the code, following guidelines in options.h to respect this new structure
[TODO] create model_options.h, simulation_options.h, initialize_options.h, stages_options.h
[TODO] have options.h point to each of above; have haplotype_options.h point to all but stages_options
[TODO] rewrite options.c and haplotype_options.c to respect this new structure
[TODO] bring in fastq simulation code (aecm.*, simulate.*, initialize.*, model.*, data.*) into khaplotype code base; discard haplotype_data.*, use data.*, and move other objects into khaplotype_model.*

Sat Oct  6 23:37:29 CDT 2018
* Can k-haplotype handle variable length reads?  Presumably yes.  Missing data are like N.
X Move simulation parameters out of model into sim_model, which is linked into model.  This way we can use the same simulator code in multiple executables.

Fri Oct  5 19:17:45 CDT 2018
[TODO] Fix this discrepancy between k-modes and some parts of ampliclust where the haplotypes (center sequences) are in matrix format instead of row vectorized matrix.

Thu Oct  4 08:40:52 CDT 2018
[DONE] This command creates a hessian that is not positive definite.  Need to debug this.  Is it initialization?  Try different initialization
./run_ampliclust --api 1 -c 0.05 -d tmp.fastq -f SRR2990088_1_noN.fastq -i 1 -k 3 -ktrue 3 -m mlogit -o tmp.out -p mlogit -r 730 -s tmp.sim -i quality

Sun Sep 30 09:46:37 CDT 2018
* Introduce amplicon_length to make the use of max_read_length and
max_read_position more clear.  Currently, max_read_length is the
amplicon_length, but this assumes that all reads start from the exact same
position.  This is only important if reads ever start at different
amplicon positions.

[DONE] Search for SERIOUS BUG in m_other(): must be fixed to use DEFAULT_PARAMETERIZATION
